# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  id: ID!
  userId: String!
  updated: DateTime!
  created: DateTime!
  active: Boolean!
  lastAttendanceUpdated: DateTime!
  nextAttendance: DateTime!
  tokenBalances: [AccountTokenBalance!]!
  orders(status: OrderStatus, type: OrderType, tokenId: String): [Order!]!
}

type AccountTokenBalance {
  accountId: ID!
  tokenId: String!
  balance: Float!
  updated: DateTime!
  created: DateTime!
}

type Attachment {
  id: ID!
  userId: String!
  sha1: String!
  width: Int!
  height: Int!
  url: String!
  etag: String!
  created: DateTime!
  updated: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DbResult {
  status: DbResultStatus!
}

enum DbResultStatus {
  success
  fail
}

type Event {
  id: ID!
  domain: String!
  type: String!
  payload: String!
  identifier: String
  trackingId: String
  correlationId: String
  causationId: String
  created: DateTime!
}

type Mutation {
  createAccount: Account!
  accountClaimAttendance(accountId: String!): Account!
  closeAccount(accountId: String!): Account!
  adminDeposit(amount: Float!, tokenId: String!, accountId: String!): Account!
  snapshotReplay: DbResult!
  resetEventStore: DbResult!
  placeOrder(input: OrderPlaceRequestedInput!): Order!
  cancelOrder(orderId: String!): Order!
  createPost(input: PostCreatedInput!): Post!
}

type Order {
  id: ID!
  userId: String!
  accountId: String!
  status: OrderStatus!
  type: OrderType!
  unitPrice: Float!
  tokenId: String!
  amount: Float!
  amountLeft: Float!
  lastMatched: DateTime
  records: [OrderMatchedRecord!]!
  created: DateTime!
  updated: DateTime!
}

type OrderMatchedRecord {
  tokenId: String!
  type: OrderType!
  unitPrice: Float!
  mainOrderId: String!
  mainAccountId: String!
  mainAmount: Float!
  tokenOrderId: String!
  tokenAccountId: String!
  tokenAmount: Float!
  created: DateTime!
}

input OrderPlaceRequestedInput {
  accountId: String!
  type: OrderType!
  tokenId: String!
  amount: Int!
  unitPrice: Float!
}

enum OrderStatus {
  MATCHING
  FINISHED
  CANCELLED
}

enum OrderType {
  BUY
  SELL
}

type Post {
  id: ID!
  uid: Float!
  userId: String!
  tokenId: String!
  title: String!
  content: String!
  status: PostStatus!
  created: DateTime!
  updated: DateTime!
  attachments: [Attachment!]
  profile: Profile!
  records: [OrderMatchedRecord!]!
}

input PostCreatedInput {
  title: String!
  content: String!
}

enum PostStatus {
  PENDING
  VERIFIED
  FAILED
}

type Profile {
  id: ID!
  username: String!
  displayName: String!
  picture: String
  posts: [Post!]!
}

type Query {
  accounts(accountId: String, userId: String): [Account!]!
  events(isRootEvent: Boolean, take: Int!, skip: Int!, causationId: String, correlationId: String, trackingId: String, identifier: String, type: String, domain: String, id: String): [Event!]!
  orders(status: OrderStatus, type: OrderType, tokenId: String, accountId: String!): [Order!]!
  getUserAttachment: [Attachment!]!
  attachments(sha: String!, userId: String!): Attachment!
  posts(id: String, tokenId: String, take: Int, skip: Int): [Post!]!
  myProfile: SelfProfile!
  profiles(username: String!, id: String!): [Profile!]!
}

type SelfProfile {
  id: ID!
  email: String
  username: String!
  displayName: String!
  picture: String
  created: DateTime!
  updated: DateTime!
  posts: [Post!]!
  accounts: [Account!]!
}
